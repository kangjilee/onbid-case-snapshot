\[요약 결론]
테스트/문서화 완료. 이제 **보안·운영 강화 → 프런트 연동 준비**로 갑니다. 아래 “Agent 작업요청”을 그대로 붙여 넣으세요.

---

**\[Agent 작업요청] KomaCore 운영화(보안·CORS·레이트리밋·로깅) + 간단 메타 API**

목표: 운영 안전장치 적용(CORS 화이트리스트, /docs 비노출, 레이트리밋, 요청 트레이싱), 헬스/메타 확장, 회귀 테스트 추가까지 완료.

작업 절차

1. **환경변수 분리**: `.env.dev`/`.env.prod` 생성 및 사용.

   * `ENV=dev|prod` `X_API_KEY=dev` `CORS_ORIGINS=https://app.example.com,https://replit-preview` `RATE_LIMIT_PER_MIN=60`.

2. **CORS 화이트리스트 적용**

   * `from fastapi.middleware.cors import CORSMiddleware`
   * `origins = os.getenv("CORS_ORIGINS","").split(",")`
   * `allow_methods=["GET","POST","OPTIONS"]`, `allow_headers=["content-type","x-api-key"]`.

3. **/docs 비노출(운영)**

   * `if ENV=="prod": app.docs_url=None; app.redoc_url=None; app.openapi_url=None`
   * 루트(`/`)는 404 또는 커스텀 안내로 처리.

4. **레이트리밋(429)**

   * `slowapi` 도입: `pip install slowapi`
   * 전역: `@limiter.limit(f"{os.getenv('RATE_LIMIT_PER_MIN',60)}/minute")` 를 `/api/v1/*`에 적용.
   * 429 응답 포맷: `{success:false, error:{code:"RATE_LIMIT", msg:"Too Many Requests"}}`.

5. **요청 트레이싱/로깅**

   * 미들웨어: `X-Request-ID` 생성 후 응답 헤더에 반환, `method path status duration_ms request_id` 로그 남김.
   * 실패(4xx/5xx)만 보존.

6. **헬스·메타 확장**

   * `GET /api/v1/healthz`에 `version, uptime_s` 추가.
   * 신규 `GET /api/v1/meta` → `{version, git_commit, started_at}`.

7. **테스트 추가** `tests/test_ops.py`

   * 401(키 없음), 429(레이트리밋), ENV=prod에서 `/docs` 404, CORS 프리플라이트 204 확인.

8. **Makefile 업데이트**

   * `fmt`/`lint` 타깃 추가(black/ruff 있으면 사용).

9. **결과물**

   * 수정 PR + 변경점 요약, `.env.sample` 갱신, 스크린샷(429/healthz/meta) 첨부.

테스트 예시(JSON/명령)

* 401: `curl -i https://<host>/api/v1/analyze -d '{}' -H 'content-type: application/json'`
* 429: 1분에 N+1회 `/api/v1/healthz` 호출 후 429 수신 확인.
* meta: `curl -s https://<host>/api/v1/meta`.

성공 기준

* dev는 `/docs` 열림, prod는 닫힘.
* CORS 허용 도메인에서만 정상, 그 외 차단.
* 401/429 동작, 로그에 `request_id` 포함.
* 테스트 100% 통과(신규 4건 포함).

---

\[다음 행동]

1. Agent 완료되면 **/api/v1/meta 응답**과 **prod에서 /docs 차단**만 확인.
2. 이어서 **프런트(입찰가 3안) 목업 연결** 지시 드리겠습니다.
3. `X_API_KEY` 운영값 교체·로테이션 주기 설정(월 1회).
